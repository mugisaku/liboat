#include"fcfont_sample.hpp"
#include"fcfont_combinedselector.hpp"


using namespace oat;


namespace fcfont{


namespace{


struct
Entry
{
  char16_t  unicode;

  const char16_t*  string;

};


const Entry
entry_table[] =
{
  {u'ぁ',u"わぁい"},
  {u'あ',u"あいのちから"},
  {u'ぃ',u"きもてぃー"},
  {u'い',u"いいえ、ちがいます"},
  {u'ぅ',u"ぐぅ"},
  {u'う',u"うんち"},
  {u'ぇ',u"うぇ"},
  {u'え',u"えいえん"},
  {u'ぉ',u"ぐぉおお"},
  {u'お',u"おっぱい"},
  {u'か',u"かくなるうえは"},
  {u'が',u"がらがら"},
  {u'き',u"き、きさま"},
  {u'ぎ',u"ぎんのかみかざり"},
  {u'く',u"くるしい"},
  {u'ぐ',u"ぐるぐるまわる"},
  {u'け',u"けんこう"},
  {u'げ',u"げっこう"},
  {u'こ',u"こんなこともあろうかと"},
  {u'ご',u"ごめんね"},
  {u'さ',u"さっぱり"},
  {u'ざ',u"ざっし"},
  {u'し',u"しらぬぞんぜぬ"},
  {u'じ',u"じかんりょこう"},
  {u'す',u"すっぱいぶどう"},
  {u'ず',u"ずんだもち"},
  {u'せ',u"せっかくだからおれは"},
  {u'ぜ',u"ぜったいれいど"},
  {u'そ',u"そんなのきいてないよ"},
  {u'ぞ',u"ぞうえんが　あらわれた"},
  {u'た',u"た、たのむ　いのちだけは"},
  {u'だ',u"だっこちゃん"},
  {u'ち',u"ち、ちがうんだ"},
  {u'ぢ',u"ぢ　がなおった"},
  {u'ぢ',u"ぢ　がなおった"},
  {u'っ',u"いったーい"},
  {u'つ',u"つめたがい"},
  {u'づ',u"おりづる"},
  {u'て',u"てんは　われらを　みはなした"},
  {u'で',u"でんこうせっか"},
  {u'と',u"とうそうちゅう"},
  {u'ど',u"どくに　おかされた"},
  {u'な',u"なつやすみ"},
  {u'に',u"にんじゃ"},
  {u'ぬ',u"ぬすっと"},
  {u'ね',u"ねむりひめ"},
  {u'の',u"のばら"},
  {u'は',u"ははは　ばかめ　かかったな"},
  {u'ば',u"ばらばらに　なった"},
  {u'ぱ',u"ぱっくり"},
  {u'ひ',u"ひどいめにあわすよ"},
  {u'び',u"びっくりしたなぁ"},
  {u'ぴ',u"ぴんくのぞうさん"},
  {u'ふ',u"ふうせん"},
  {u'ぶ',u"ぶーぶーいうな"},
  {u'ぷ',u"ぷーくすくす"},
  {u'へ',u"へっぽこ"},
  {u'べ',u"べつに　いいじゃん"},
  {u'ぺ',u"ぺろりと　たいらげた"},
  {u'ほ',u"ほのおのつるぎ"},
  {u'ぼ',u"ぼんのうだらけ"},
  {u'ぽ',u"ぽっとなった"},
  {u'ま',u"まんまるぼたん"},
  {u'み',u"みんなあつまれ"},
  {u'む',u"むち"},
  {u'め',u"めぐすり"},
  {u'も',u"もしかして"},
  {u'ゃ',u"き、きゃあ"},
  {u'や',u"やるならやらねば"},
  {u'ゅ',u"にゅるにゅる"},
  {u'ゆ',u"ゆめのなかへいってみたいとおもいませんか"},
  {u'ょ',u"きょうは　もう　おやすみ"},
  {u'よ',u"よくも　ゆるさん"},
  {u'ら',u"らくちん"},
  {u'り',u"りんご"},
  {u'る',u"るすはまかせた"},
  {u'れ',u"れいちょうるい"},
  {u'ろ',u"ろくなもんじゃねえ"},
  {u'わ',u"わかりました"},
  {u'を',u"をいをい"},
  {u'ん',u"んー　こんなもんかな"},
  {u'ー',u"みーんみん"},

  {u'ァ',u"ファイア"},
  {u'ア',u"アイス"},
  {u'ィ',u"ウィンド"},
  {u'イ',u"インビンシブル"},
  {u'ゥ',u"ドゥビドゥバ"},
  {u'ウ',u"ウォーター"},
  {u'ェ',u"フェロモン"},
  {u'エ',u"エロイムエッサイム"},
  {u'ォ',u"フォンドボー"},
  {u'オ',u"オレンジジュース"},
  {u'カ',u"カレイドスコープ"},
  {u'ガ',u"ガングリオン"},
  {u'キ',u"キック"},
  {u'ギ',u"ギミック"},
  {u'ク',u"クリスタル"},
  {u'グ',u"グラウンド"},
  {u'ケ',u"ケルヌンノス"},
  {u'ゲ',u"ゲルマニウム"},
  {u'コ',u"コーンポタージュ"},
  {u'ゴ',u"ゴリラゴリラゴリラ"},
  {u'サ',u"サイクロプス"},
  {u'ザ',u"ザクロ"},
  {u'シ',u"シルカゲル"},
  {u'ジ',u"ジルコニウム"},
  {u'ス',u"スカイブルー"},
  {u'ズ',u"ズルイ"},
  {u'セ',u"セイレーン"},
  {u'ゼ',u"ゼオライト"},
  {u'ソ',u"ソードマスター"},
  {u'ゾ',u"ゾディアック"},
  {u'タ',u"タルタロス"},
  {u'ダ',u"ダミー"},
  {u'チ',u"チョコレート"},
  {u'ヂ',u"バカヂカラ"},
  {u'ッ',u"チップスター"},
  {u'ツ',u"ツモ"},
  {u'ヅ',u"ヅ"},
  {u'テ',u"テトリス"},
  {u'デ',u"デストロイ"},
  {u'ト',u"トートロジー"},
  {u'ド',u"ドミニコ"},
  {u'ナ',u"ナターシャ"},
  {u'ニ',u"ニカラグア"},
  {u'ヌ',u"ヌードル"},
  {u'ネ',u"ネックレス"},
  {u'ノ',u"ノーム"},
  {u'ハ',u"ハンバーグ"},
  {u'バ',u"バーバリアン"},
  {u'パ',u"パリィ"},
  {u'ヒ',u"ヒューリスティック"},
  {u'ビ',u"ビルディング"},
  {u'ピ',u"ピーチパイ"},
  {u'フ',u"フリップフロップ"},
  {u'ブ',u"ブタノール"},
  {u'プ',u"プミポン"},
  {u'ヘ',u"ヘレニズム"},
  {u'ベ',u"ベッツィ"},
  {u'ペ',u"ペネロープ"},
  {u'ホ',u"ホフマン"},
  {u'ボ',u"ボリューミー"},
  {u'ポ',u"ポカパマズ"},
  {u'マ',u"マーズアタック"},
  {u'ミ',u"ミネラルウォーター"},
  {u'ム',u"ムック"},
  {u'メ',u"メランコリー"},
  {u'モ',u"モノリス"},
  {u'ャ',u"ジャベリン"},
  {u'ヤ',u"ヤーレンソーラン"},
  {u'ュ',u"ジュディオング"},
  {u'ユ',u"ユグドラシル"},
  {u'ョ',u"ミョウバン"},
  {u'ヨ',u"ヨガ"},
  {u'ラ',u"ラスプーチン"},
  {u'リ',u"リクライニングシート"},
  {u'ル',u"ルビー"},
  {u'レ',u"レコンキスタ"},
  {u'ロ',u"ロードモナーク"},
  {u'ワ',u"ワイン"},
  {u'ヲ',u"ヲ"},
  {u'ン',u"ソラニン"},

  {u'0',u"0+1-2*3/4%(5<<6)>>7|8&9"},
  {u'!',u"!!?"},
  {u'A',u"ACTIVE"},
  {u'B',u"BACKUP"},
  {u'C',u"CONGRATURATIONS"},
  {u'D',u"DANGER"},
  {u'E',u"ENERGY"},
  {u'F',u"FANTASTIC"},
  {u'G',u"GREAT"},
  {u'H',u"HP"},
  {u'I',u"I"},
  {u'J',u"JUMP"},
  {u'K',u"KNIGHT"},
  {u'L',u"LUCKY"},
  {u'M',u"MAGIC"},
  {u'N',u"NEW"},
  {u'O',u"OGRE"},
  {u'P',u"POKE"},
  {u'Q',u"QUEEN"},
  {u'R',u"REPURE"},
  {u'S',u"SUPER"},
  {u'T',u"TOD"},
  {u'U',u"UNDER"},
  {u'V',u"VICTORY"},
  {u'W',u"WONDERFUL"},
  {u'X',u"X~RAY"},
  {u'Y',u"YOGLRT"},
  {u'Z',u"ZOO"},

};


const Entry*
pointer_table[0x10000];


}




Sample::
Sample():
unicode(0)
{
  style.background_color = const_color::black;

  change_content_width(  8*x_element_number);
  change_content_height(16*y_element_number);

    for(auto&  ent: entry_table)
    {
      pointer_table[ent.unicode] = &ent;
    }
}




void
Sample::
change(char16_t  unicode_)
{
  unicode = unicode_;

  need_to_redraw();
}


void
Sample::
render()
{
  auto  pt = content.point;

  fill();

  auto  ent = pointer_table[unicode];

    if(ent)
    {
      int  x = 0;
      int  y = 0;

      const char16_t*  s = ent->string;

        while(*s)
        {
            if((x+8) >= content.width)
            {
              x  =  0;
              y += 16;
            }


            if((y+16) >= content.height)
            {
              break;
            }


          auto  c = Combined::pointer_table[*s++];

            if(c)
            {
              CombinedSelector::draw_combined(*c,this,pt.x+x,pt.y+y);
            }


          x += 8;
        }
    }
}




}



